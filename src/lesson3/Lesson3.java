/**
 * Copyright Â© 2014, Oracle and/or its affiliates. All rights reserved.
 *
 * JDK 8 MOOC Lesson 3 homework
 */
package lesson3;

import java.io.IOException;
import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * @author Simon Ritter (@speakjava)
 * @author Stuart Marks
 */
public class Lesson3 {
  /* How many times to repeat the test.  5 seems to give reasonable results */
  private static final int RUN_COUNT = 5;
  
  /**
   * Used by the measure method to determine how long a Supplier takes to
   * return a result.
   *
   * @param <T> The type of the result provided by the Supplier
   * @param label Description of what's being measured
   * @param supplier The Supplier to measure execution time of
   * @return
   */
  static <T> T measureOneRun(String label, Supplier<T> supplier) {
    long startTime = System.nanoTime();
    T result = supplier.get();
    long endTime = System.nanoTime();
    System.out.printf("%s took %dms%n",
        label, (endTime - startTime + 500_000L) / 1_000_000L);
    return result;
  }

  /**
   * Repeatedly generate results using a Supplier to eliminate some of the
   * issues of running a micro-benchmark.
   *
   * @param <T> The type of result generated by the Supplier
   * @param label Description of what's being measured
   * @param supplier The Supplier to measure execution time of
   * @return The last execution time of the Supplier code
   */
  static <T> T measure(String label, Supplier<T> supplier) {
    T result = null;

    for (int i = 0; i < RUN_COUNT; i++)
      result = measureOneRun(label, supplier);

    return result;
  }

  /**
   * Computes the Levenshtein distance between every pair of words in the
   * subset, and returns a matrix of distances. This actually computes twice as
   * much as it needs to, since for every word a, b it should be the case that
   * lev(a,b) == lev(b,a) i.e., Levenshtein distance is commutative.
   *
   * @param wordList The subset of words whose distances to compute
   * @param parallel Whether to run in parallel
   * @return Matrix of Levenshtein distances
   */
    static int[][] computeLevenshtein(List<String> wordList, boolean parallel) {
        final int LIST_SIZE = wordList.size();
        int[][] distances = new int[LIST_SIZE][LIST_SIZE];

        // YOUR CODE HERE
        // Your task is to write the necessary code in the computeLevenshtein method to
        // calculate the distances between each pair of strings in the wordList using the 
        // streams API.  You will need to process this sequentially or in parallel based on 
        // the flag passed as a parameter
        //Levenshtein.lev(null, null)
        Stream<?> outerStream = wordList.stream();

        if (parallel) {
            outerStream.parallel();
        } else {
            outerStream.sequential();
        }
        distances = outerStream  
                .map(Object::toString)  
                // Map (convert) every word in outerStream to an int array
                // by re-streaming the wordList for every (outer) word and calculating an
                // int lev value for w1, w2 and collecting ints into an array (akin to nested looping).  
                .map(w1 -> (parallel ? wordList.parallelStream() : wordList.stream())
                        .mapToInt(w2 -> Levenshtein.lev(w1, w2)).toArray()
                )  
                
                // Return an array containing the elements of this stream, 
                // as well as any additional arrays that might be required for a partitioned execution.  
                // Use the provided generator function to allocate the returned array.  
                // The generator function takes an integer, which is the size/dimension 
                // of the desired array, and produces an array of the desired size
                .toArray(int[][]::new);  
                /* 
                // Could also use the following collect and toArray(distances)  
                // instead of .toArray(int[][]::new); 
                .collect(Collectors.toList())// collect each int array into a new element of a list
                // collect into the pre-allocated array (distances serves as the array generator function)  
                .toArray(distances);
                */ 
        return distances;
    }
  
  /**
   * Process a list of random strings and return a modified list
   * 
   * @param wordList The subset of words whose distances to compute
   * @param parallel Whether to run in parallel
   * @return The list processed in whatever way you want
   */
  static List<String> processWords(List<String> wordList, boolean parallel) {
    // YOUR CODE HERE
    
    return null;
  }

  /**
   * Main entry point for application
   *
   * @param args the command line arguments
   * @throws IOException If word file cannot be read
   */
  public static void main(String[] args) throws IOException {
    RandomWords fullWordList = new RandomWords();
    List<String> wordList = fullWordList.createList(1000);

    measure("Sequential", () -> computeLevenshtein(wordList, false));
    measure("Parallel", () -> computeLevenshtein(wordList, true));
    
//    measure("Sequential", () -> processWords(wordList, false));
//    measure("Parallel", () -> processWords(wordList, true));
  }


}